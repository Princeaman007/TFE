import { useParams, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";

function VerifyEmail() {
  const { token } = useParams(); // R√©cup√©rer le token depuis l'URL
  const navigate = useNavigate(); // Pour rediriger apr√®s la v√©rification
  const [message, setMessage] = useState("V√©rification en cours...");

  useEffect(() => {
    const verifyEmail = async () => {
      try {
        const response = await fetch(`http://localhost:5000/api/auth/verify-email/${token}`);

        if (!response.ok) {
          throw new Error("Erreur lors de la requ√™te");
        }

        const data = await response.json();
        console.log("üì© R√©ponse du serveur :", data);

        setMessage(data.message);

        // ‚úÖ Si l'email est d√©j√† v√©rifi√©, on redirige vers la connexion
        if (data.message.includes("d√©j√† v√©rifi√©")) {
          setMessage("‚úÖ Votre email est d√©j√† v√©rifi√©. Vous serez redirig√© vers la connexion...");
          setTimeout(() => navigate("/login"), 3000);
        }

        // ‚ùå Si le lien est invalide ou expir√©
        else if (data.message.includes("invalide") || data.message.includes("expir√©")) {
          setMessage("‚ùå Lien invalide ou expir√©. Veuillez demander un nouveau lien.");
        }

        // ‚úÖ Si la v√©rification est r√©ussie, redirection apr√®s 3 secondes
        else if (data.message.includes("succ√®s")) {
          setTimeout(() => navigate("/login"), 3000); // ‚úÖ Correction ici
        }
      } catch (error) {
        console.error("‚ùå Erreur lors de la v√©rification :", error);
        setMessage("‚ùå Erreur lors de la v√©rification. Veuillez r√©essayer.");
      }
    };

    verifyEmail();
  }, [token, navigate]);

  return (
    <div style={{ textAlign: "center", marginTop: "50px" }}>
      <h2>{message}</h2>
    </div>
  );
}

export default VerifyEmail;
